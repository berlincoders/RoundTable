<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Routetable</title>
  <!-- Include Three.js library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    #map-container {
      position: relative;
    }

    .node {
      position: absolute;
      width: 20px;
      height: 20px;
      background-color: red;
      border-radius: 50%;
      border: none;
      cursor: pointer;
    }

    .node:hover::after {
      content: attr(data-message);
      position: absolute;
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      background-color: white;
      color: black;
      padding: 5px;
      border-radius: 5px;
      white-space: nowrap;
    }

    #custom-button {
      position: absolute;
      width: px;
      height: 20px;
      background-color: white;
      border-radius: 50%;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="map-container"></div>

  <!-- Your background image -->
  <%= image_tag "knights.png", id: "background-image", style: "display: none;" %>

  <button id="custom-button" class="node" data-message="Button" style="top: 350px; left: 850px;"></button>

  <script>
    // Load the background texture
    const backgroundImageUrl = document.getElementById("background-image").src;
    const loader = new THREE.TextureLoader();
    loader.load(backgroundImageUrl, function(texture) {
      // Create a plane geometry matching the aspect ratio of the background image
      const aspectRatio = texture.image.width / texture.image.height;
      const width = 20; // Set a fixed width for the background plane
      const height = width / aspectRatio;
      const geometry = new THREE.PlaneGeometry(width, height);

      // Create a material with the loaded texture
      const material = new THREE.MeshBasicMaterial({ map: texture });

      // Create a mesh with the geometry and material for the background plane
      const backgroundMesh = new THREE.Mesh(geometry, material);

      // Set up the scene, camera, and renderer
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.getElementById('map-container').appendChild(renderer.domElement);

      // Add the background plane to the scene
      scene.add(backgroundMesh);

      // Create and position the rings
      // First 5 Levels rings are Neon blue
      createRing(scene, 12.9, 13, 0x00ffff);
      createRing(scene, 11.9, 12, 0x00ffff);
      createRing(scene, 10.9, 11, 0x00ffff);
      createRing(scene, 9.9, 10, 0x00ffff);
    // Neon blue

      // Position the camera
      camera.position.z = 20;

      // Animation loop
      function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      }
      animate();
    });

    // Function to create a ring and add it to the scene
    function createRing(scene, innerRadius, outerRadius, color) {
      const segments = 64; // Number of segments
      const geometry = new THREE.RingGeometry(innerRadius, outerRadius, segments);
      const material = new THREE.MeshBasicMaterial({ color: color, side: THREE.DoubleSide });
      const ring = new THREE.Mesh(geometry, material);
      scene.add(ring);
    }

    // Show pop-up message on mouseover
    function showPopUpMessage(event) {
      const message = event.target.dataset.message;
      console.log(`Showing message: ${message}`);
    }

    // Hide pop-up message on mouseout
    function hidePopUpMessage() {
      console.log('Hiding message');
    }

    // Event listener for button hover
    const button = document.getElementById('custom-button');
    button.addEventListener('mouseover', showPopUpMessage);
    button.addEventListener('mouseout', hidePopUpMessage);
  </script>
</body>
</html>
